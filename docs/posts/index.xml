<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on REPL: Rest-Eat-Program Loop</title>
    <link>https://blog.nsfisis.dev/posts/</link>
    <description>Recent content in Posts on REPL: Rest-Eat-Program Loop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 09 Apr 2022 21:50:19 +0900</lastBuildDate><atom:link href="https://blog.nsfisis.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHPerKaigi 2022 トークン問題の解説</title>
      <link>https://blog.nsfisis.dev/posts/2022-04-09/phperkaigi-2022-tokens/</link>
      <pubDate>Sat, 09 Apr 2022 21:50:19 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2022-04-09/phperkaigi-2022-tokens/</guid>
      <description>はじめに 本日開始された PHPerKaigi 2022 の PHPer チャレンジにおいて、弊社デジタルサーカスの問題を 3問作成した。この記事では、これらの問題の解説をおこなう。 リポ</description>
    </item>
    
    <item>
      <title>Rust のプリミティブ型はどこからやって来るか</title>
      <link>https://blog.nsfisis.dev/posts/2021-10-02/rust-where-are-primitive-types-from/</link>
      <pubDate>Sat, 02 Oct 2021 09:39:27 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-10-02/rust-where-are-primitive-types-from/</guid>
      <description>この記事は Qiita から移植してきたものです。 元 URL: https://qiita.com/nsfisis/items/9a429432258bbcd6c565 前置き Rust において、プリミティブ型の名前は予約語でない。したがって、次のコードは合法である。 #![allow(non_camel_case_types)] #![allow(dead_code)] struct</description>
    </item>
    
    <item>
      <title>[Ruby] then キーワードと case in</title>
      <link>https://blog.nsfisis.dev/posts/2021-10-02/ruby-then-keyword-and-case-in/</link>
      <pubDate>Sat, 02 Oct 2021 09:38:50 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-10-02/ruby-then-keyword-and-case-in/</guid>
      <description>この記事は Qiita から移植してきたものです。 元 URL: https://qiita.com/nsfisis/items/787a8cf888a304497223 TL; DR case - in によるパターンマッチング構文でも、case - when と同じように then が使える (場合によっては使</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] 属性構文の属性名にはキーワードが使える [[void]] [[for]]</title>
      <link>https://blog.nsfisis.dev/posts/2021-10-02/cpp-you-can-use-keywords-in-attributes/</link>
      <pubDate>Sat, 02 Oct 2021 09:38:30 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-10-02/cpp-you-can-use-keywords-in-attributes/</guid>
      <description>この記事は Qiita から移植してきたものです。 元 URL: https://qiita.com/nsfisis/items/94090937bcf860cfa93b タイトル落ち。まずはこのコードを見て欲しい。 #include &amp;lt;iostream&amp;gt; [[alignas]] [[alignof]] [[and]] [[and_eq]] [[asm]] [[auto]] [[bitand]] [[bitor]] [[bool]] [[break]] [[case]] [[catch]] [[char]] [[char16_t]] [[char32_t]] [[class]] [[compl]] [[const]] [[const_cast]] [[constexpr]] [[continue]] [[decltype]] [[default]] [[delete]]</description>
    </item>
    
    <item>
      <title>[Ruby] 自身を実行している処理系の種類を判定する</title>
      <link>https://blog.nsfisis.dev/posts/2021-10-02/ruby-detect-running-implementation/</link>
      <pubDate>Sat, 02 Oct 2021 09:37:50 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-10-02/ruby-detect-running-implementation/</guid>
      <description>この記事は Qiita から移植してきたものです。 元 URL: https://qiita.com/nsfisis/items/74d7ffeeebc51b20d791 Ruby という言語には複数の実装があるが、それらをスクリプト上からどのようにして programmatically に見分ければよいだろ</description>
    </item>
    
    <item>
      <title>Vimで選択した行の順番を入れ替える</title>
      <link>https://blog.nsfisis.dev/posts/2021-10-02/vim-swap-order-of-selected-lines/</link>
      <pubDate>Sat, 02 Oct 2021 09:37:25 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-10-02/vim-swap-order-of-selected-lines/</guid>
      <description>この記事は Qiita から移植してきたものです。 元 URL: https://qiita.com/nsfisis/items/4fefb361d9a693803520 バージョン情報 :version の一部 VIM - Vi IMproved 8.2 (2019 Dec 12, compiled Jan 26 2020 11:30:30) macOS version Included patches: 1-148 Huge version without GUI. よく紹介されている手法 tac / tail tac</description>
    </item>
    
    <item>
      <title>[Vim] autocmd events の BufWrite/BufWritePre の違い</title>
      <link>https://blog.nsfisis.dev/posts/2021-10-02/vim-difference-between-autocmd-bufwrite-and-bufwritepre/</link>
      <pubDate>Sat, 02 Oct 2021 09:37:12 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-10-02/vim-difference-between-autocmd-bufwrite-and-bufwritepre/</guid>
      <description>この記事は Qiita から移植してきたものです。 元 URL: https://qiita.com/nsfisis/items/79ab4db8564032de0b25 TL; DR 違いはない。ただのエイリアス。 調査記録 Vim の autocmd events には似通った名前のものがいくつかある。大抵は :help</description>
    </item>
    
    <item>
      <title>[Python] クロージャとUnboundLocalError: local variable &#39;x&#39; referenced before assignment</title>
      <link>https://blog.nsfisis.dev/posts/2021-10-02/python-unbound-local-error/</link>
      <pubDate>Sat, 02 Oct 2021 09:32:37 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-10-02/python-unbound-local-error/</guid>
      <description>この記事は Qiita から移植してきたものです。 元 URL: https://qiita.com/nsfisis/items/5d733703afcb35bbf399 本記事は Python 3.7.6 の動作結果を元にして書かれている。 Python でクロージャを作ろうと、次のようなコードを書いた</description>
    </item>
    
    <item>
      <title>PHPerKaigi 2021</title>
      <link>https://blog.nsfisis.dev/posts/2021-03-30/phperkaigi-2021/</link>
      <pubDate>Tue, 30 Mar 2021 23:22:40 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-03-30/phperkaigi-2021/</guid>
      <description>PHPerKaigi 2021 参加レポ 2021/03/26 から 2021/03/28 にかけて開催された、PHPerKaigi 2021 に一般参加者として参加した。 弊社デジタルサーカス株式会社 (今年1月から勤務) は</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://blog.nsfisis.dev/posts/2021-03-05/my-first-post/</link>
      <pubDate>Fri, 05 Mar 2021 23:38:21 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2021-03-05/my-first-post/</guid>
      <description>Test Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
  </channel>
</rss>
