<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>my-programs on REPL: Rest-Eat-Program Loop</title>
    <link>https://blog.nsfisis.dev/tags/my-programs/</link>
    <description>Recent content in my-programs on REPL: Rest-Eat-Program Loop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 24 Apr 2022 13:22:52 +0900</lastBuildDate><atom:link href="https://blog.nsfisis.dev/tags/my-programs/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>term-banner: ターミナルにバナーを表示するツールを書いた</title>
      <link>https://blog.nsfisis.dev/posts/2022-04-24/term-banner-write-tool-showing-banner-in-terminal/</link>
      <pubDate>Sun, 24 Apr 2022 13:22:52 +0900</pubDate>
      
      <guid>https://blog.nsfisis.dev/posts/2022-04-24/term-banner-write-tool-showing-banner-in-terminal/</guid>
      <description><![CDATA[ <h1 id="はじめに">はじめに</h1>
<p>こんなものを作った。</p>
<pre tabindex="0"><code>$ term-banner 'Hello, World!' 'こんにちは、' '世界！'
</code></pre><p><img src="https://raw.githubusercontent.com/nsfisis/term-banner/main/screenshot.png" alt="term-banner のスクリーンショット"></p>
<p>コマンドライン引数として渡した文字列をターミナルに大きく表示する。</p>
<p>リポジトリはこちら: <a href="https://github.com/nsfisis/term-banner">https://github.com/nsfisis/term-banner</a></p>
<h1 id="motivation">Motivation</h1>
<p>以前、<a href="https://github.com/nsfisis/big-clock-mode">big-clock-mode</a> という似たようなプログラムを書いた。
これは tmux の <code>:clock-mode</code> コマンドに着想を得たもので、<code>:clock-mode</code> よりも大きく現在時刻を表示する。</p>
<p><code>big-clock-mode</code> を開発したのは、次のようなシチュエーションで使うためである。
弊社では現在リモートワークが基本だが、web 会議などで画面共有しているときに、休憩を挟んで特定の時刻から再開する、ということがある。
こういったケースで、画面上に現在の時刻を大きめに表示しておくと、モニタから離れても遠くから時刻がわかるので便利である。</p>
<p>それこそタイマアプリか何かを使えばいいのだが、ターミナルに棲むいきものとしては、住処から離れたくないわけだ。</p>
<p>しばらく便利に使っていたのだが、ひとつ不満点が出てきた。それは、再開する時刻がいつだったかを覚えておかなければならないということだ。
どこかにメモしておいてもいいが、せっかくなら現在時刻とともに表示させておきたい。</p>
<p>そんなわけで、「任意の文字列をターミナルに表示する」プログラムを書く運びとなった。
まあ、作らなくても探せばあると思うが、作りたいものは作りたいので知ったことではない。</p>
<h1 id="プログラム">プログラム</h1>
<p>全体の流れは次のようになっている。</p>
<ol>
<li>フォントファイルを読み込む</li>
<li>コマンドライン引数を Shift-JIS に変換する (フォントが Shift-JIS 基準で並んでいるため)</li>
<li>1文字ずつレンダリングしていく</li>
</ol>
<p><code>big-clock-mode</code> が Go 製なので、今回も Go で書いた。
PNG が標準ライブラリにあったり、Shift-JIS のエンコーディングが準標準ライブラリにあったりしたのは助かった。</p>
<p>フォントファイルは <code>go:embed</code> で実行ファイルに埋め込んでいるので、ビルド後はワンバイナリで動く。
仕事ではスクリプト言語ばかり書いているが、やはりコンパイル言語はいい。</p>
<h1 id="フォント">フォント</h1>
<p>フリーの 8x8 ビットマップフォントである、<a href="https://littlelimit.net/misaki.htm">美咲フォント 2021-05-05a 版</a> を使わせていただいた。</p>
<p>はじめは自分でポチポチ打っていたのだが、「き」くらいまでやって挫折した。
同じく 8x8 で作っていたのだが、平仮名でさえも、この小さなキャンバスにはとても収められない。</p>
<p>美咲フォントは、平仮名・片仮名に留まらず、JIS 第一・第二水準の漢字までサポートしている。
第二水準ともなると一生お目にかかることのない字の方が多いくらいだが、これをこの大きさで書くというのは、もはや芸術の域である。</p>
<p>さらに言うと、実のところ美咲フォントは実サイズ 7x7 で作られており、余白が設けられている。
これは、単純にそのまま並べても字間・行間を確保できるようにという配慮である。
おかげでコーディングまで楽になった。</p>
<p>ゴシック体と明朝体があったが、私の好みで明朝体の方にした。
ただ、ゴシック体の方が見やすい気がするので、フォントを選べるように後ほど拡張するかもしれない。</p>
<p>2022-04-27 追記: <code>-f</code> オプションで選べるようにした。</p>
<h1 id="おわりに">おわりに</h1>
<p>あなたもターミナルに住んでみませんか？</p>
]]></description>
    </item>
    
  </channel>
</rss>
