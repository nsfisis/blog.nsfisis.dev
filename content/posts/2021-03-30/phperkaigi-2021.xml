<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0">
  <info>
    <title>PHPerKaigi 2021</title>
    <abstract>
      2021-03-26 から 2021-03-28 にかけて開催された、PHPerKaigi 2021 に参加した。
    </abstract>
    <keywordset>
      <keyword>conference</keyword>
      <keyword>php</keyword>
      <keyword>phperkaigi</keyword>
    </keywordset>
    <revhistory>
      <revision>
        <date>2021-03-30</date>
        <revremark>公開</revremark>
      </revision>
    </revhistory>
  </info>
  <section xml:id="_phperkaigi_2021_参加レポ">
    <title>PHPerKaigi 2021 参加レポ</title>
    <simpara>2021-03-26 から 2021-03-28
    にかけて開催された、 <link xl:href="https://phperkaigi.jp/2021/">PHPerKaigi 2021</link>
    に一般参加者として参加した。
    弊社 <link xl:href="https://www.dgcircus.com/">デジタルサーカス株式会社</link>
    (今年1月から勤務)
    はダイヤモンドスポンサーとなっており、スポンサー枠のチケットを使わせていただいた。</simpara>
  <simpara>このようなカンファレンスには初めて参加するのでかねてより心待ちにしていたのだが、生憎2日目から体調を崩してしまい、この記事も途中までとなっている。まだ見ていないセッションも多いが、ひとまず現時点での参加レポを書いておく。</simpara>
  <simpara>発表はトラック A、B に分かれていたのだが、今回はすべて A
  トラックを視聴している (切り替えるのが面倒だっただけ)。</simpara>
<section xml:id="_凡例">
  <title>凡例</title>
  <blockquote>
    <simpara>発表・スライドのメモ (引用ではない)</simpara>
  </blockquote>
  <simpara>感想など</simpara>
</section>
<section xml:id="_day_0_前夜祭_20210327">
  <title>Day 0 前夜祭 (2021/03/27)</title>
  <section xml:id="_1730_a">
    <title>17:30 [A]</title>
    <simpara>PHP で AWS Lambda</simpara>
    <blockquote>
      <simpara>Rails のプロジェクトを PHPer のメンバのみでメンテ →他のメンバもわかる
      PHP にリプレースを検討</simpara>
    <itemizedlist>
      <listitem>
        <simpara>サーバレス</simpara>
      </listitem>
      <listitem>
        <simpara>サーバ・インフラの管理が不要</simpara>
      </listitem>
      <listitem>
        <simpara>アプリケーションコードの知識だけで保守可能</simpara>
      </listitem>
    </itemizedlist>
    <simpara>ゼロベースで作れる案件が (Railsの件とは別に)
    あるため、そちらで試験的に導入?</simpara>
  <simpara>AWSの学習 AWS のドキュメント DevelopersIO</simpara>
  <simpara>AWS Lambda のカスタムランタイムで PHP を動かす</simpara>
  <simpara>サーバのセットアップや維持管理を気にしなくて良い サーバーレスで PHP
  を動かすツールがすでにある サーバーレス構築はすんなり</simpara>
<simpara>今は Laravel がルーティングしている Laravel Livewire を Lambda
に載せられないか？ デプロイ方法は？ バッチ処理は？ (Lambda は
15分の制限)</simpara>
<simpara>Lambda でコンテナイメージがサポートされるように</simpara>
<simpara>抽象化されたもの「だけ」しか知らないよりも具象の理解は助けになる</simpara>
</blockquote>
<simpara>AWS Lambda のような Function as a Service
はマイクロサービス化における一つの到達点に思えるのだが、これを使って実際に
web サービスを作る具体的なイメージがまだ見えない (注: すべて for me
として書いている)。</simpara>
<simpara>PHP on AWS Lambda があれだけ簡単に動かせるのには驚いた。</simpara>
<simpara>勝手に AWS Lambda だとフットプリントの軽さが求められそう (= PHP +
  Laravel などでは動かなさそう)
  だという先入観を持っていたのだが、この発表のデモによればそうでもないらしい。</simpara>
</section>
<section xml:id="_1810_a">
  <title>18:10 [A]</title>
  <simpara>大規模サイトの SEO</simpara>
  <blockquote>
    <simpara>大規模サイト (100万ページ以上) Google の基準</simpara>
    <simpara>クロールバジェットを意識したSEO</simpara>
    <simpara>大規模サイトでコンテンツが中頻度 (1回/週) で更新 OR 中規模サイト
    (10,000以上) でコンテンツが目まぐるしく変更される
    これを満たさないなら、クロールバジェットを考えなくてもいい</simpara>
  <simpara>サーチコンソール 「カバレッジ」の「除外」
  多すぎるのは問題→クロールバジェットを浪費している</simpara>
<itemizedlist>
  <listitem>
    <simpara>クエリの順番を決める</simpara>
  </listitem>
  <listitem>
    <simpara>空の値のルールを決めておく</simpara>
  </listitem>
  <listitem>
    <simpara>リダイレクトすればインデックスはうまくいく</simpara>
  </listitem>
  <listitem>
    <simpara>リンクが存在する限りクロールはされる</simpara>
  </listitem>
</itemizedlist>
<simpara>リニューアル前のURL</simpara>
<simpara>インデックスは移行される
リンクのURLが存在する限り、別のURLとしてクロールされる
リダイレクトされるとはいえ、リニューアル前のURLは移行した方が良い
リニューアルで無視されるようになったパラメータも注意</simpara>
<simpara>robotes.txt で拒否しているのにクロールされる 一時的に拒否を外して 404 や
301 を読ませる 内部リンクを確認する JS でのリンクに書き換え</simpara>
<simpara>クエリパラメータからURLのパスに <literal>/tokyo?area=HOGE</literal> → <literal>/tokyo/HOGE</literal></simpara>
<simpara>URL 設計だいじ</simpara>
</blockquote>
<simpara>SEO (Search Engine Optimization)
は大して知らないので新鮮な話が多かった。その分語れることも少ない……。</simpara>
</section>
<section xml:id="_1850_a">
  <title>18:50 [A]</title>
  <blockquote>
    <simpara>知覚可能 操作可能 理解可能 堅牢 ちゃんとしたHTMLを書く
    (閉じタグ・入れ子構造など)</simpara>
  <itemizedlist>
    <listitem>
      <simpara>標準の HTML を適切に使う</simpara>
    </listitem>
    <listitem>
      <simpara>WAI-ARIA</simpara>
    </listitem>
    <listitem>
      <simpara>キーボードフレンドリー</simpara>
    </listitem>
    <listitem>
      <simpara>マシンフレンドリー</simpara>
    </listitem>
    <listitem>
      <simpara>SEOフレンドリー</simpara>
    </listitem>
  </itemizedlist>
  <simpara>button タグ →キーボード h1 タグ →スクリーンリーダー・クローラ a タグ</simpara>
  <simpara>WAI-ARIA HTML では表現できないセマンティクスを追加する</simpara>
  <itemizedlist>
    <listitem>
      <simpara>ロール</simpara>
      <itemizedlist>
        <listitem>
          <simpara>何をするのか？</simpara>
        </listitem>
        <listitem>
          <simpara>ユーザーアクションによって変化しない</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
    <listitem>
      <simpara>プロパティ</simpara>
      <itemizedlist>
        <listitem>
          <simpara>関連づけられたデータ</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
    <listitem>
      <simpara>ステート</simpara>
      <itemizedlist>
        <listitem>
          <simpara>現在の状態</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>
  <simpara>まずは標準の HTML 要素で解決する 何でもかんでも WAI-ARIA
  を使えばいいというものではない</simpara>
<simpara>マウスホバーでツールチップが出てくるが、キーボード操作では出てこない</simpara>
<simpara>VoiceOver</simpara>
<simpara>全ての属性を使う必要はない
あくまでアクセシビリティを上げるための方法の一つにすぎない</simpara>
</blockquote>
<simpara>つい最近 WAI-ARIA
についての記事を読んだばかりだったので個人的にタイムリーな話題だった。(あまりこの言葉を使いたくないのだが)
いわゆる「健常者」にとって、こうした問題を普段の生活の中で意識するのは難しい。だからこそ情報へのアンテナは張っておくようにしたい。</simpara>
</section>
<section xml:id="_1930_a">
  <title>19:30 [A]</title>
  <simpara>PHP で FUSE</simpara>
  <simpara>個人的に楽しみだった発表。</simpara>
  <blockquote>
    <simpara>VFS (virtual filesystem) vs 具体的なファイルシステム</simpara>
    <simpara>最適な実装方法は状況により異なる</simpara>
    <simpara>アプリケーションに見せるAPIは変えずに実装を隠蔽する→VFS</simpara>
    <simpara>カーネルのプログラムを作るのは難しい
    * 権限がデカすぎる
    * システム全体がクラッシュ
    * セキュリティリスク
    * 開発サイクルを回しづらい
    * ネイティブコードにコンパイルされる言語である必要がある</simpara>
  <simpara>Filesystem in USEr space (FUSE)</simpara>
  <itemizedlist>
    <listitem>
      <simpara>特定の C の関数を呼ぶことで filesystem が作れる</simpara>
    </listitem>
    <listitem>
      <simpara>FFI を持つ言語なら FUSE が使える</simpara>
    </listitem>
  </itemizedlist>
  <simpara>SSHFS / s3fs / Docker Desktop</simpara>
  <simpara>Linux 以外でも使える</simpara>
  <itemizedlist>
    <listitem>
      <simpara>dokany (on Windows)</simpara>
    </listitem>
    <listitem>
      <simpara>osxfuse</simpara>
    </listitem>
  </itemizedlist>
  <simpara>VFS: システムコールが呼ばれると、ファイルシステムによってコール FUSE:
  カーネル空間からユーザ空間へ通信</simpara>
<simpara>高レベルなラッパで型をつける</simpara>
<simpara>PHP 以外では Wordpress を FUSE にマウントする実装がある (C, Python など)</simpara>
<itemizedlist>
  <listitem>
    <simpara>grep できる</simpara>
  </listitem>
  <listitem>
    <simpara>sed できる</simpara>
  </listitem>
  <listitem>
    <simpara>編集できる</simpara>
  </listitem>
</itemizedlist>
</blockquote>
<simpara>期待通りの興味深い発表だった。FUSE
自体も今回の発表で知ったのだが、これ本体の実装を見るのも面白そうだ。
この発表を聞きながらファイルシステムにマウントできそうなものを考えていたのだが、およそ木構造をしているものすべてと言えそうだ
(ハンマーしか持っていないと云々)。何かできそうだがなかなか思いつかない。</simpara>
</section>
</section>
<section xml:id="_day_1_20210327">
  <title>Day 1 (2021/03/27)</title>
  <section xml:id="_1050_a">
    <title>10:50 [A]</title>
    <simpara>ATDD</simpara>
    <blockquote>
      <itemizedlist>
        <listitem>
          <simpara>ユーザーストーリー</simpara>
        </listitem>
        <listitem>
          <simpara>ユニットテスト</simpara>
        </listitem>
        <listitem>
          <simpara>CI/CD</simpara>
        </listitem>
      </itemizedlist>
      <simpara>ユーザストーリーの受け入れ条件が曖昧になりがち
      デグレチェックがユニットレベルでは収まらない場合、手動で同じシナリオをテストしている</simpara>
    <simpara>Q2の強化 アジャイルテストの4象限</simpara>
    <simpara>技術面/ビジネス面
    開発チーム支援(コーディング前・コーディング中)/製品批評(コーディング後)</simpara>
  <itemizedlist>
    <listitem>
      <simpara>Q1: 技術面 &amp; チーム支援</simpara>
      <itemizedlist>
        <listitem>
          <simpara>TDD</simpara>
        </listitem>
        <listitem>
          <simpara>ユニットテストなど</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
    <listitem>
      <simpara>Q2: ビジネス面 &amp; チーム支援</simpara>
      <itemizedlist>
        <listitem>
          <simpara>ATDD</simpara>
        </listitem>
        <listitem>
          <simpara>ビジネス面の受け入れテストで駆動する</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>
  <simpara>Agile Alliance ユーザストーリーのスキルレベルを高める</simpara>
  <simpara>テストピラミッド</simpara>
  <itemizedlist>
    <listitem>
      <simpara>UI Tests</simpara>
    </listitem>
    <listitem>
      <simpara>Service Tests</simpara>
    </listitem>
    <listitem>
      <simpara>Unit Tests</simpara>
    </listitem>
    <listitem>
      <simpara>異なる粒度のテストを書く</simpara>
    </listitem>
    <listitem>
      <simpara>高レベルになるほど、持つべきテストは少なくなる</simpara>
      <itemizedlist>
        <listitem>
          <simpara>ピラミッド型になる</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>
  <simpara>高レベルテストが多すぎる→アイスクリームコーン　アンチパターン</simpara>
  <simpara>ATDD (Acceptance TDD) API経由・UI経由での高レベルテスト E2E test</simpara>
  <simpara>ストーリ受け入れテスト</simpara>
  <simpara>入れ子のフィードバックループ ATDD(外側) と TDD(内側)</simpara>
  <simpara>外部品質・内部品質</simpara>
  <simpara>バーティカルスライスのデリバリー</simpara>
  <itemizedlist>
    <listitem>
      <simpara>cucumber</simpara>
    </listitem>
    <listitem>
      <simpara>gauge</simpara>
    </listitem>
    <listitem>
      <simpara>behat</simpara>
    </listitem>
  </itemizedlist>
  <simpara>ユビキタス言語 手動テストもspecに書く 自動化は可能だがコスパが悪い
  失敗することがわかっているテスト(レッドテスト)はCIから外す
  失敗時の原因究明が難しい 饒舌なエラーメッセージ 状況のスナップショット</simpara>
<simpara>Continuous Testing</simpara>
</blockquote>
<simpara>User Acceptance Test (UAT)
くらいの規模になると個人開発・趣味開発では触れない領域なので、大いに勉強になった。スライドに添付されている資料が相当に充実していたので、これを読むのが本番といった様相すら感じる。
高レベルテストの自動化は現在のプロジェクトでも感じており、自動化のチャンスは伺っている。とはいえセッションでも指摘されているように自動化することにコストがかかりすぎる領域があるのも事実で、そのバランスが難しい。</simpara>
</section>
<section xml:id="_1150_a">
  <title>11:50 [A]</title>
  <simpara>型解析を用いたリファクタリング</simpara>
  <simpara>型のある世界で生きてきた身として大いに楽しみにしていた発表。</simpara>
  <blockquote>
    <itemizedlist>
      <listitem>
        <simpara>PHPStan</simpara>
      </listitem>
      <listitem>
        <simpara>Phan</simpara>
      </listitem>
      <listitem>
        <simpara>Psalm</simpara>
      </listitem>
    </itemizedlist>
    <simpara>autoload も認識できる bootstrapFiles</simpara>
    <simpara>編集箇所と利用箇所を CI でチェック ルールレベルを徐々に引き上げていく
    警告が多すぎると見落としてしまう・無視されやすくなる</simpara>
  <simpara>型がついていないことによるエラーが多い</simpara>
  <simpara>型よりも詳細な検査 <literal>Util_Assert::min</literal></simpara>
  <simpara>SQL を静的解析 placeholder の型付け</simpara>
  <simpara>警告レベルを低いレベルから導入 タイプヒントを積極的に書いていく PHPStan
  の拡張を追加する</simpara>
</blockquote>
<simpara>昨今、動的型付き言語での型宣言・型アノテーション・型ヒントの導入が相次いでいる。長らく静的型付き言語を書いてきた私からすると、ようやく気づいたかといったところだが、ともかく型を導入する言語が増えてきた。
今のプロジェクトでも新しく追加するコードには型をつけるよう努めているが、どうしても古いコードには型がついていない。個人的には型のないコードに対してどう型を自動的に付けるかという点に興味があり、その点で
Ruby の typeprof には注目している。</simpara>
</section>
<section xml:id="_1230_a">
  <title>12:30 [A]</title>
  <simpara>昼食をとっていた。事前に何か食料を買っておくべきだった。</simpara>
</section>
<section xml:id="_1310_a">
  <title>13:10 [A]</title>
  <simpara>Documentation as Code</simpara>
  <simpara>この発表も以前から非常に楽しみにしていた。</simpara>
  <blockquote>
    <simpara>開発開始までのオーバーヘッド 新規にチームにジョイン
    担当範囲外の機能を理解 オンボーディングのコスト</simpara>
  <simpara>PHPerKaigi 2020 で発表あり</simpara>
  <simpara>継続的にシステムの理解を助けるドキュメント</simpara>
  <simpara>継続的ドキュメンテーション システムとドキュメントの乖離</simpara>
  <simpara>書いてあることが間違っている・足りない * 徐々にずれていく *
  システムの更新タイミングとドキュメントの更新タイミングに差がある</simpara>
<simpara>システムとドキュメントは対応関係がある * 間違ったドキュメント *
存在しないドキュメント</simpara>
<simpara>システムとドキュメントの乖離を定量化する 継続的に
システムの更新に近いタイミングで ドキュメントを更新し続ける</simpara>
<simpara>Documentation as Code</simpara>
<simpara>コードと同じツールでドキュメントを書く * issue tracker * vcs * plain
text markup * automation</simpara>
<simpara>開発者 システム ドキュメント 構造化データ ソフトウェア</simpara>
<simpara>システムから構造化データを抽出する PHPDoc OpenAPI</simpara>
<simpara>ビュー 関心ごとに合わせてアーキテクチャを一つ以上の側面(断面)で説明する</simpara>
<simpara>ビューの単位でドキュメントに</simpara>
<simpara>スタックトレースからのドキュメント生成</simpara>
</blockquote>
<simpara>ドキュメントの管理は現プロジェクトでも課題と感じている。作られた当初は正しくても、実態と乖離していくのを止めるのは困難を極める。全体的に興味深い発表だったが、特にスタックトレースからのドキュメント生成というアイデアに惹かれるものを感じた。スタックトレースという実態と不可分な
(乖離しない)
情報を起点にするのは理にかなっている。問題はトレースをいつ、どう取るかだろうか。それを自動化しなければ、実態との乖離が避けられないだろう。</simpara>
</section>
<section xml:id="_1410_a">
  <title>14:10 [A]</title>
  <simpara>cookie による session 管理</simpara>
  <simpara>全体的に基本的な話だったので特に触れない。Cookie
  やセッションの話としては非常に分かりやすくまとめられていたので、知らない人が学ぶにはいい教材だろう。</simpara>
</section>
<section xml:id="_1450_a">
  <title>14:50 [A]</title>
  <simpara>PHP のエラーと例外</simpara>
  <blockquote>
    <simpara>エラー PHPエンジンがエラーを通知する 例外 プログラムが投げる</simpara>
    <simpara>PHP7-8とエラー</simpara>
    <simpara>PHPエンジンのエラーの一部が に変換されるようになった → try-catch
    で捕捉できる</simpara>
  <simpara>は例外とは異なる</simpara>
  <simpara>PHP8 でエラーレベルの引き上げ</simpara>
  <itemizedlist>
    <listitem>
      <simpara>捕捉すべきもの</simpara>
      <itemizedlist>
        <listitem>
          <simpara>recoverable</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
    <listitem>
      <simpara>捕捉すべきでないもの</simpara>
      <itemizedlist>
        <listitem>
          <simpara>unrecoverable</simpara>
        </listitem>
        <listitem>
          <simpara>開発時に対処できるもの</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>
  <simpara>例外 * 捕捉して事後処理 * 捕捉せず(or 捕捉した上で)さらに上に是非を問う</simpara>
  <simpara>開発段階で例外を把握し、ハンドリングを考えておく</simpara>
  <simpara>と</simpara>
  <simpara>はキャッチすべきでない</simpara>
  <itemizedlist>
    <listitem>
      <simpara></simpara>
      <itemizedlist>
        <listitem>
          <simpara>本番で起きてはいけない</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
    <listitem>
      <simpara></simpara>
      <itemizedlist>
        <listitem>
          <simpara>本番で起きてはいけない →生じないのだから捕捉もしない</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
    <listitem>
      <simpara></simpara>
      <itemizedlist>
        <listitem>
          <simpara>起こるかもしれないので本番環境でも考慮する</simpara>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>
  <simpara>捕捉して対応するのではなく、未然に防ぐ</simpara>
  <simpara>独自例外を使う を投げてしまうと、 catch ()せざるを得ない →catch
  範囲が広すぎる</simpara>
<simpara>SPL の例外を使う</simpara>
<simpara>例外翻訳
上位のレイヤが下位のレイヤの例外を捕捉し、上位レイヤのAPIに「翻訳」する
下位レイヤの知識に依存させない</simpara>
<simpara>@throws 捕捉してほしい例外を書き連ねておく</simpara>
<simpara>呼び出しもとに負わせたい責任</simpara>
</blockquote>
<simpara>PHP を学んでいる途中の私としては、今まさに聞きたい発表だった (現時点で
PHP を書き始めてから 4ヶ月ほどになる)。</simpara>
<simpara>個人的に例外やエラーを最もうまく扱っているのは Go、Swift、Rust、Haskell
などのエラーを「値として」扱う言語だと思っている。try-catch
は通常の処理フローを完全に壊してしまう上、構文としても重すぎる。値としてのエラー通知は
C言語時代への回帰ともいえるが、その頃と異なるのはエラーを暗黙のうちに握り潰すことがないということだ。これらの言語は型を持っており、静的に検証ができる
(C のそれはまともな型付けではない。念のため)。</simpara>
<simpara>PHP
のように、すでに例外が言語システムに根ざしている言語ではどうすればよいか。この場合も同じく静的検証の力を借りることになるだろう。</simpara>
</section>
<section xml:id="_1530_a">
  <title>15:30 [A]</title>
  <simpara>Laravel のメール認証</simpara>
  <simpara>Laravel
  の知識がない私にはまったくついていけなかった。また、個人的にタイトルがややミスリーディングに感じた。</simpara>
</section>
<section xml:id="_1610_a">
  <title>16:10 [A]</title>
  <simpara>gRPC</simpara>
  <blockquote>
    <simpara>Unary RPCs Server streaming RPCs Client streaming RPCs Bidirectional
    streaming RPCs</simpara>
  <simpara>Protobuf</simpara>
  <simpara>実装とAPIが乖離しにくい 自動生成 複数言語でも相互に使える</simpara>
  <simpara>マイクロサービスのサービス通信 スマホアプリ ゲームサーバ</simpara>
  <simpara>PHP では？</simpara>
  <simpara>PHP ではストリーミングが難しい リクエストごとにプロセスが使い捨て</simpara>
  <simpara>PHP ではgRPCのクライアントしか対応していない</simpara>
  <simpara>gRPC-Web ブラウザで扱うためのJSライブラリ+プロトコル</simpara>
  <simpara>HTTP/1.1 でも使える Unary RPC と Server streaming RPC のみ</simpara>
  <simpara>Envoy Nginx などで相互に gRPC と gRPC-Web で変換</simpara>
  <simpara>Amp イベント駆動な並行処理のフレームワーク</simpara>
  <simpara>HTTP/2 対応</simpara>
  <simpara>C#のgRPC-Webが楽</simpara>
</blockquote>
<simpara>(発表の中でもまさに同じことをおっしゃっていたが) PHP
以外の方が向いているだろう、というのが第一の感想である。gRPC
はそれ自体というよりも Protobuf
というエコシステムに乗れることのメリットが大きいと感じる。そのエコシステムにうまく乗れない時点で、うーんという感じ。</simpara>
</section>
<section xml:id="_1650_a">
  <title>16:50 [A]</title>
  <simpara>アーキテクチャテスト</simpara>
  <blockquote>
    <simpara>Independent Core Layer Pattern</simpara>
    <simpara>開発初期のアーキテクチャが崩れる
    アーキテクチャ観点のコードレビューができない</simpara>
  <simpara>どこにクラスを置けばよいか？ ドキュメントがない</simpara>
  <simpara>アーキテクチャ設計に関する知識が属人化・暗黙知化</simpara>
  <simpara>ガイドライン * 最初にルールを決めるのは簡単 *
  ルール通り作り始めるのも簡単 *
  →維持するのが難しい、人が決めたものゆえ壊れやすい</simpara>
<simpara>PHP の特性 * クラスは public * 可視性の制御が public / protected /
private のみ * 依存関係の制御が困難</simpara>
<simpara>アーキテクチャテスト
クラスの依存関係や実装ルールをコードとして表現し、自動テスト化する</simpara>
<itemizedlist>
  <listitem>
    <simpara>deptrac</simpara>
  </listitem>
  <listitem>
    <simpara>phpat</simpara>
  </listitem>
</itemizedlist>
<simpara>Independent Core Layer Pattern</simpara>
<simpara>アーキテクチャテストの失敗 * 実装誤り * or アーキテクチャが適切でない *
開発の過程でフィードバックしていく</simpara>
<simpara>モジュラーモノリス→マイクロサービスへ</simpara>
</blockquote>
</section>
</section>
<section xml:id="_day_2_20210328">
  <title>Day 2 (2021/03/28)</title>
  <simpara>冒頭に書いた通り、2日目から体調が悪くまともに聴けていない。途中までは頭痛を我慢しつつ見ていたのだが、まともに入ってこなかった。</simpara>
  <simpara>残念ではあるが、いずれにせよ見られていない発表は他にもあるので、今週末にでもまとめて見ようと思う。</simpara>
</section>
<section xml:id="_全体の感想">
  <title>全体の感想</title>
  <simpara>Day 2
  にほとんど参加できなかったのは残念だが、イベント自体は大変楽しく、また興味深いものであった。自分がまったく知らない領域の話を聞けるのはこうしたイベントならではだと感じる。オンライン開催ゆえ現地に行く必要がなく、気軽に参加できたのも
  (特に初参加者として) 嬉しいポイントだった。</simpara>
<simpara>今回、雑談/登壇者への質問等向けに Discord
サーバもあったのだが、こちらは参加こそしたものの ROM
のままになってしまった。発表に1ウィンドウ、メモを書くのに1ウィンドウ、Discord
表示に
1ウィンドウで私にはもう脳のリソースとディスプレイのスペースが追いつかなかった
(さらにいうと Zoom
でアンカンファレンスもやっていたようだ。こちらはまったく参加していない)。</simpara>
<simpara>1つ個人的な反省点としては、一つ一つのセッションを真剣に聞き過ぎたというものがある。もっと適当に聞いておけばよかった。これだけだと大変語弊があるのだが、言い方を変えると、Discord
しかりアンカンファレンスしかり「このイベントのこの瞬間にしかないコンテンツ」に触れずに、後から見返せる発表やスライドに注力してしまった、ということだ。発表の詳細な見直しはあとからできるのだから、今しかできないことを考えるべきだった。
まあ初カンファレンスだし、とお茶を濁しておこう。</simpara>
<simpara>さて、カンファレンスで一つ気になったことがある。それは、Discord
という書き込み場所が増えたことでニコ生のコメントの流量が吸い取られてしまったのではないか、という点だ。ニコニコだけ見ていると過疎っているかのように見えた発表も、Discord
の方では盛り上がっている、というのを何度か見かけた。ニコニコのコメント方式は盛り上がりを如実に反映するが、逆もまたしかり。Discord
があったこと自体はプラスだったと思うが、この点はマイナスだったのではないかと感じる。</simpara>
<simpara><hr/></simpara>
<simpara>最後になりましたが、毎年の PHPerKaigi
開催にご尽力されている皆様、スピーカーの皆様、楽しい3日間でした。ありがとうございました！
(ずっと常体で書いてしまったのでいきなり仏頂面から笑顔になったようで気持ち悪い)</simpara>
<simpara>ではまた来年。</simpara>
</section>
</section>
</article>
